@page "/products"
@using CustomerOrderApp.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<h3>Products</h3>

<div class="row">
    <div class="col">
        @if (products != null)
        {
            <ul class="list-group">
                @foreach (var product in products)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@product.Name - $@product.Price</span>
                        <div>
                            <button class="btn btn-danger btn-sm me-2" @onclick="() => DeleteProduct(product)">Delete</button>
                            <button class="btn btn-primary btn-sm" @onclick="() => EditProduct(product)">Edit</button>
                        </div>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
    <div class="col">
        <h4>Add New Product</h4>

        <form @onsubmit="HandleSubmit">
            <div class="mb-3">
                <label for="productName" class="form-label">Name:</label>
                <input type="text" id="productName" class="form-control" @bind="newProduct.Name" />
            </div>
            <div class="mb-3">
                <label for="productPrice" class="form-label">Price:</label>
                <input type="number" id="productPrice" class="form-control" @bind="newProduct.Price" />
            </div>
            <button type="submit" class="btn btn-primary">Add Product</button>
        </form>
    </div>
</div>

@code {
    private List<Product> products;
    private Product newProduct = new Product();
    private Product selectedProduct;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await Http.GetFromJsonAsync<List<Product>>("api/products");
    }

    private async Task HandleSubmit()
    {
        await Http.PostAsJsonAsync("api/products", newProduct);
        await LoadProducts();
        newProduct = new Product();
    }

    private async Task DeleteProduct(Product product)
    {
        if (await ConfirmDelete())
        {
            await Http.DeleteAsync($"api/products/{product.ProductId}");
            await LoadProducts();
        }
    }

    private async Task EditProduct(Product product)
    {
        selectedProduct = product; 
        Console.WriteLine($"Editing product: {selectedProduct.Name}");
    }

    private async Task<bool> ConfirmDelete()
    {
        return await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this product?" });
    }

    private async Task EditProductAsync(Product product)
    {
        Navigation.NavigateTo($"/products/edit/{product.ProductId}");
    }


}
